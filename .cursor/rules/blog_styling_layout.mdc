---
description: For making any styling updates to the blog
globs:
alwaysApply: false
---
# Blog Styling and Layout

This rule describes how styling and overall page layout are handled for the blog section.

## Layout

*   Blog pages (both index and individual posts) are rendered within the `home` layout: [`app/views/layouts/home.html.erb`](mdc:app/views/layouts/home.html.erb).
*   This `home` layout, in turn, renders the shared navigation partial [`app/views/home/shared/_nav.html.erb`](mdc:app/views/home/shared/_nav.html.erb) and is itself rendered within the main [`app/views/layouts/application.html.erb`](mdc:app/views/layouts/application.html.erb) layout.
*   The shared footer [`app/views/home/shared/_footer.html.erb`](mdc:app/views/home/shared/_footer.html.erb) is rendered at the end of the blog's `index.html.erb` and `show.html.erb` views, outside the main `.blog-scope`.

## Styling


+*   **Tailwind CSS:** The primary styling mechanism is Tailwind CSS. Utility classes are used in blog view templates like @`app/views/blog/posts/show.html.erb` and unique component styling.
+*   **Content elements** within the body of blog posts (e.g., `h2`, `ul`, `p > a`, custom action buttons) are styled via a dedicated `<style>` tag within the `<head>` of @`app/views/blog/posts/show.html.erb`.

    *   These C(not using Tailwind's `@apply` directly in this inline tag).
    *   Styles are scoped using CSS ancestor selectors (e.g., `.blog-scope .prose > article > .rich-text h2`) to ensure they specifically target elements within the rendered blog post  approach centralizes common content styling, leading to cleaner individual blog post partials.
*   **Individual Content Partials:** Partials like @`_gumroad-aphipped.html.erb` are now significantly cleaner of repetitive Tailwind utility classes for common elements. They rely on the centralized styles from `show.html.erb`'s `<style>` tag. Tailwind utility classes are still used within these partials for any unique, one-off styling requirements not covered by the common styles.
*   **Tailwind Typography:** The `@tailwindcss/typography` plugin is used to provide base styling for the HTML content rendered from blog post bodies. This is applied via the `.prose` (and `prose-lg`, `lg:prose-xl`) classes in @`app/views/blog/posts/show.html.erb`, which wraps the content partials. The centralized styles in `show.html.erb` build upon or customize the default typography styles.
*   **Scoped Preflight:** To provide a clean styling base for the blog section without affecting the rest of the application, a custom scoped Preflight is implemented.
    *   **Global Preflight Disabled:** In @`tailwind.config.js`, `corePlugins: { preflight: false }` disables Tailwind's default global Preflight.
    *   **Custom Plugin (`scopedPreflightPlugin`):** A custom plugin within @`tailwind.config.js` is responsible for scoping Preflight styles.
        *   It reads the standard `preflight.css` from the `tailwindcss` module.
        *   It uses PostCSS to iterate through all rules in `preflight.css` and prepends e's selectors (e.g., `h1 { ... }` becomes `.blog-scope :where(h1) { ... }`). The `:where()` pseudo-class is used to keep the specificity of these scoped base styles low, allowing Tailwind utility classes and the centralized content styles to easily override them.
        *   These modified, scoped base styles are then added using Tailwind's `addBase` function.
    *   **Usage (`.blog-scope` class):** The class `.blog-scope` is applied to a wrapping `div` within @`app/views/layouts/home.html.erb`. This `div` specifically wraps the `yield`ed content for blog pages. This ensures that the scoped Preflight styles only affect the main content area of the blog (index and show pages), and do *not* affect the shared navigation or footer rendered by the `home` layout itself or by the blog views outside this scope.
    *   **Effect:** This provides a Tailwind-friendly reset and base styling environment *only* for the blog content, preventing conflicts with the application's existing global styles.
*   **Existing SCSS:** Global styles (e.g., from `_global.scss`) or component-specific SCSS (e.g., `_nav.scss` for @`app/views/home/shared/_nav.html.erb`) will still apply to shared elements like the navigation and footer as they are outside the `.blog-scope` or have their own established styles.
